__author__ = 'jscastanoc'
import sys
import argparse

import pandas as pd
import numpy as np
from matplotlib import pyplot as pl

import QSTK.qstkutil.tsutil as tsu # Computes metrics for given time series
import QSTK.qstkutil.DataAccess as da

import MarketSim


def read_portfolio(fname):
    cumm_port = pd.read_csv(fname,index_col=None,header=None,
                parse_dates={'DATE': [0,1,2]})
    cumm_port.columns = ['DATE','VAL']
    ldt_timestamps = MarketSim.get_dateInfo(cumm_port)
    cumm_port.index = ldt_timestamps
    return cumm_port

def calc_sharpeRatio(portfolio_value):
    """
    Computes the sharpe ratio of a portfolio

    :param portfolio_value: Pandas time series with the daily portfolio value
    :return: sharpe ratio of the portfolio
    """
    dr_portfolio = portfolio_value.copy()
    dr_portfolio = dr_portfolio/dr_portfolio[0]
    tsu.returnize0(dr_portfolio)
    avg_dailyRT = np.mean(dr_portfolio)
    std_dailyRT = np.std(dr_portfolio)
    return (avg_dailyRT/std_dailyRT)*np.sqrt(252)


def get_mktBenchmark(ldt_timestamps, data_source='Yahoo', mkt_bench_sym='$SPX'):
    """

    :param data_source: String indicating the source of the market data, as
        accepted by QSTK.qstkutil.DataAccess.DataAccess
    :param mkt_benchmark: String indicating the symbol used as market benchmark
    :return: Pandas dataframe containing the closing prices of the symbols
        ls_orders, ranging from the earliest to the latest listed date.
    """
    c_dataobj = da.DataAccess(data_source)
    ls_keys = ['open', 'high', 'low', 'close', 'volume', 'actual_close']
    ldf_data = c_dataobj.get_data(ldt_timestamps, [mkt_bench_sym], ls_keys)
    market = dict(zip(ls_keys,ldf_data))
    market_close = pd.DataFrame(market['close'], index=ldt_timestamps)
    market_close = market_close.fillna(method='ffill')
    market_benchmark = market_close.fillna(method='bfill')
    return market_benchmark

def print_results(cumm_port, mkt_benchmark):
    norm_port = cumm_port['VAL'].copy()
    norm_port = norm_port/norm_port[0]
    norm_bench = mkt_benchmark[mkt_benchmark.columns[0]].copy()
    norm_bench = norm_bench/norm_bench[0]

    norm_port_ret = norm_port.copy()
    norm_bench_ret = norm_bench.copy()
    tsu.returnize0(norm_port_ret)
    tsu.returnize0(norm_bench_ret)
    msg = """Data Range :  {0}  to  {1}

Sharpe Ratio of Fund : {2}
Sharpe Ratio of Benchmark : {3}

Total Return of Fund :  {4}
Total Return of Benchmark : {5}

Standard Deviation of Fund : {6}
Standard Deviation of Benchmark : {7}

Average Daily Return of Fund : {8}
Average Daily Return of Benchmark : {9}""".format(cumm_port.index[0],
        cumm_port.index[-1],
        calc_sharpeRatio(norm_port),
        calc_sharpeRatio(norm_bench),
        norm_port[-1],
        norm_bench[-1],
        np.std(norm_port_ret),
        np.std(norm_bench_ret),
        np.mean(norm_port_ret),
        np.mean(norm_bench_ret))
    print(msg)

if __name__ == '__main__':
    """
    Analyze the portfolio simulated by MarketSim

    :param pv file containing portfolio values generated by MarketSim.py
            (default values.csv)
    :param sym symbol to use as market benchmark, e.g., $SPX or $DJI
            (default $SPX)

    Call Example
        python Analyze.py -pv values.csv -sym $SPX
    """
    parser = argparse.ArgumentParser(description="""Analyse the
                                        portfolio simulated by MarketSim""")
    parser.add_argument('-pv', default='values.csv', type=str)
    parser.add_argument('-sym', default='$SPX', type=str)
    args = parser.parse_args()

    port_val_file = args.pv
    bench_sym = args.sym

    cumm_port = read_portfolio(port_val_file)
    ldt_timestamps = MarketSim.get_dateInfo(cumm_port)
    mkt_benchmark = get_mktBenchmark(ldt_timestamps, mkt_bench_sym=bench_sym)

    print_results(cumm_port,mkt_benchmark)

    pl.plot(ldt_timestamps,mkt_benchmark[bench_sym]/mkt_benchmark[bench_sym][0],'b',label=bench_sym)
    pl.plot(ldt_timestamps,cumm_port['VAL']/cumm_port['VAL'][0],'r',label='Portfolio')
    pl.legend()
    pl.show()
