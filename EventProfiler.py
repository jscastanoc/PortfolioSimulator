import csv
import copy
import datetime as dt
import argparse
import pandas as pd
import numpy as np

import QSTK.qstkutil.qsdateutil as du
import QSTK.qstkstudy.EventProfiler as ep

import MarketSim
import BollingerBands
import Analyze


def strategy_five_drop(d_data,ldt_timestamps):
    ls_symbols = list(d_data['close'].keys())
    df_close = copy.deepcopy(d_data['close'])
    df_events = copy.deepcopy(d_data['close']) * np.NAN
    for i in range(1,len(ldt_timestamps)):
        prices_today = df_close.ix[ldt_timestamps[i]]
        prices_yest = df_close.ix[ldt_timestamps[i-1]]
        for c_sym in ls_symbols:
            if prices_today[c_sym] < 5.0 and prices_yest[c_sym] >= 5.0:
                df_events[c_sym].ix[ldt_timestamps[i]] = 1
    return df_events

def strategy_bollinger(d_data, ldt_timestamps):
    ls_symbols = list(d_data['close'].keys())
    df_index_bollinger = BollingerBands.bollinger_bands(d_data['close'], ldt_timestamps,
                                                        ls_symbols=ls_symbols)
    mkt_benchmark = Analyze.get_mktBenchmark(ldt_timestamps)
    mkt_bollinger = BollingerBands.bollinger_bands(mkt_benchmark, ldt_timestamps)

    df_events = copy.deepcopy(df_index_bollinger) * np.NAN
    for i in range(1,len(ldt_timestamps)):
        boll_today = df_index_bollinger.ix[ldt_timestamps[i]]
        boll_yest = df_index_bollinger.ix[ldt_timestamps[i-1]]
        for c_sym in ls_symbols:
            if boll_today[c_sym] <= -2.0 and boll_yest[c_sym] > -2.0 and \
                      mkt_bollinger['$SPX'].ix[ldt_timestamps[i]] >= 1.0:
                df_events[c_sym].ix[ldt_timestamps[i]] =1

    return df_events


def generate_order_list(df_events, ldt_timestamps, order_name='orders.csv'):
    writer = csv.writer(open(order_name, 'wb'), delimiter=',')
    trade_day = []
    trade_order = []
    trade_qty = []
    trade_symbol = []
    for symbol in list(df_events.keys()):
        idx = np.where(df_events[symbol].notnull())[0]
        if len(idx) > 0:
            for day_idx in idx:
                trade_day.append(ldt_timestamps[day_idx])
                trade_order.append('BUY')
                trade_qty.append(100)
                trade_symbol.append(symbol)
                trade_day.append(du.getNYSEoffset(ldt_timestamps[day_idx] ,5))
                trade_order.append('SELL')
                trade_qty.append(100)
                trade_symbol.append(symbol)
    d = {'SYMBOL':trade_symbol,
         'ACTION': trade_order,
         'QTY': trade_qty }

    orders_df = pd.DataFrame(d,index=trade_day)
    orders_df = orders_df.sort()
    for idx, data in orders_df.iterrows():
        writer.writerow([idx.year,
                         idx.month,
                         idx.day,
                         data['SYMBOL'],
                         data['ACTION'],
                         data['QTY'], ''])

def run_event_profiler(d_data,df_events):
    ep.eventprofiler(df_events, d_data, i_lookback=20, i_lookforward=20,
            s_filename=symbol_file+'.pdf', b_market_neutral=True,
            b_errorbars= True, s_market_sym='SPY')

def write_order_tocvs(date,symbol,action, qty):
    """
    """
    writer = csv.writer(open(name, 'a'), delimiter=',')
    for row_index in portfolio_val.index:
        writer.writerow(row_to_enter)
    return 0

if __name__ == '__main__':
    """
    Generates an order list based on the events generated by the strategy selected

    :param  st: string indicating the strategy to use
                    (default five-drop)
                    Implemented Strategies:
                        five-drop
                        bollinger-bands
    :param  sym: text file containing the symbols to consider in the analysis
                    (default sp5002012)
    :param  dstart: starting date of the analysis
                    (default 2008 1 1)
    :param  dend: ending data
                    (default 2009 12 31)
    :param  eprof: flag. runs the event profiler (generates pdf with the averaged
                    time locked response of the strategy
                    false

    Call example:
        python EventProfiler.py -st five-drop -sym sp5002012 -dstart 2008 1 1 -dend 2009 12 31 -eprof
    """

    parser = argparse.ArgumentParser(description="""Generates an order list based on
                            the events generated by the strategy selected.""")
    parser.add_argument('-st', default='five-drop', type=str,
                        choices=['five-drop', 'bollinger-bands'])
    parser.add_argument('-sym', default='sp5002012', type=str)
    parser.add_argument('-dstart', nargs=3, default=[2008,1,1], type=int)
    parser.add_argument('-dend', nargs=3, default= [2009,12,31], type=int)
    parser.add_argument('-eprof', dest='calc_eprof', action='store_const',
                        const=True, default=False)
    args = parser.parse_args()

    dt_start = dt.datetime(*args.dstart)
    dt_end = dt.datetime(*args.dend)
    symbol_file = args.sym
    d_data, ldt_timestamps = MarketSim.read_market(dt_start,dt_end,symbol_file)

    if args.st == 'five-drop':
        strategy = strategy_five_drop
    elif args.st == 'bollinger-bands':
        strategy = strategy_bollinger

    df_events = strategy(d_data, ldt_timestamps)
    generate_order_list(df_events,ldt_timestamps)

    if args.calc_eprof:
        run_event_profiler(d_data, df_events)

